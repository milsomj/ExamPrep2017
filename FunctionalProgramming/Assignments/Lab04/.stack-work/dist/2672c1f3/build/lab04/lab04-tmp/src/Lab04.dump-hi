
==================== FINAL INTERFACE ====================
2016-12-20 22:39:24.5894857 UTC

interface main@main:Lab04 7103
  interface hash: 526d2d36be33f7325708555464916205
  ABI hash: dedaf32f71a49ea378694cd5af19569c
  export-list hash: 2091a94726eb58c4750a70d4be766da7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 747de83b8544fd4bdeebcd876f41377b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lab04.commandIn
  Lab04.done04
  Lab04.execute04
  Lab04.exit04
  Lab04.findAndRemove
  Lab04.getTreeTotal
  Lab04.mkprompt
  Lab04.prompt04
  Lab04.stateFloat
  Lab04.thisIsLab04
  Lab04.State
module dependencies: BinTree
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.IO.Handle.Text 06d2dc7704bcfe88a2157fd04748ace5
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 638c10c4fd4901a0aca5b77c9f14123d
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  BinTree 03e75a5640ff3e092d41e970eca6a216
  exports: 71448bd79c2ab5bcc92c157d1120de03
  BinTree 81aefdecbef457d83b602830ff5d95a6
  Branch 770df489c61d06c588dcf92a12ae9eb8
  Empty cda84d3d71af71ac5a3a48fcf6a72805
  Leaf 44887b80f944cca79476647b0ff99648
  treeInsert 7475cf96315e3a4e3171a56d1fb96ed5
b97940defff2f9713f5e9a0468c8164a
  type State =
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
3cc550551edb104edc7b01213301a283
  commandIn :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ input1 :: GHC.Base.String ->
                 GHC.Base.eqString input1 Lab04.commandIn1) -}
dc05208770d80a96d31c51cf56b20b95
  commandIn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "exit"#) -}
853ffb339f5ca8aa1650de9ff4fa6b42
  done04 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True) Lab04.commandIn -}
4236d57be6945a902af45a4db60dbc7e
  execute04 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.IO.Handle.Types.Handle
    -> [GHC.Types.Char]
    -> (BinTree.BinTree GHC.Base.String GHC.Types.Float,
        GHC.Types.Float)
    -> GHC.Types.IO
         (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><L,U(U,U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lab04.execute1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                                 GHC.Types.Float)>_R)) -}
f8d503b63afb4caf7df5dafc42d6b51a
  execute1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.IO.Handle.Types.Handle
    -> [GHC.Types.Char]
    -> (BinTree.BinTree GHC.Base.String GHC.Types.Float,
        GHC.Types.Float)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><L,U(U,U(U))><L,U> -}
d67961f62dd408ae05d1196e8a92d613
  exit04 :: GHC.Base.Monad m => Lab04.State -> m GHC.Types.Float
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   state :: Lab04.State ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ GHC.Types.Float
                   (case state of wild { (,) ds f -> f })) -}
df22ac2dc0df69c1a69b226c8156b193
  findAndRemove ::
    GHC.Classes.Eq a =>
    BinTree.BinTree a GHC.Types.Float
    -> a -> BinTree.BinTree a GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   $dEq :: GHC.Classes.Eq a
                   eta :: BinTree.BinTree a GHC.Types.Float
                   eta1 :: a ->
                 letrec {
                   findAndRemove2 :: BinTree.BinTree a GHC.Types.Float
                                     -> a -> BinTree.BinTree a GHC.Types.Float
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ ds :: BinTree.BinTree a GHC.Types.Float k1 :: a ->
                     case ds of wild {
                       BinTree.Empty -> BinTree.Empty @ a @ GHC.Types.Float
                       BinTree.Leaf k d
                       -> case GHC.Classes.== @ a $dEq k k1 of wild1 {
                            GHC.Types.False -> wild
                            GHC.Types.True
                            -> BinTree.Leaf @ a @ GHC.Types.Float k Lab04.findAndRemove1 }
                       BinTree.Branch left k d right
                       -> case GHC.Classes.== @ a $dEq k k1 of wild1 {
                            GHC.Types.False
                            -> BinTree.Branch
                                 @ a
                                 @ GHC.Types.Float
                                 (findAndRemove2 left k1)
                                 k
                                 d
                                 (findAndRemove2 right k1)
                            GHC.Types.True
                            -> BinTree.Branch
                                 @ a
                                 @ GHC.Types.Float
                                 left
                                 k
                                 Lab04.findAndRemove1
                                 right } }
                 } in
                 findAndRemove2 eta eta1) -}
2908bd1e302a2ee6a18f41900f6dfdce
  findAndRemove1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# __float 0.0) -}
0f9b5ec0a9ee28916743cc6845a0e7e7
  findAndRemove_findAndRemove ::
    BinTree.BinTree GHC.Base.String GHC.Types.Float
    -> GHC.Base.String
    -> BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
2bfc153abb62897f6be6d2cf671be31f
  getTreeTotal ::
    BinTree.BinTree t GHC.Types.Float -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4aa53edd839615fb58bf5b168b346758
  mkprompt :: Lab04.State -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ state :: Lab04.State ->
                 case state of wild { (,) ds f ->
                 case f of ww { GHC.Types.F# ww1 ->
                 GHC.Float.$w$sshowSignedFloat1
                   GHC.Float.$fShowFloat_$sshowFloat
                   GHC.Show.shows18
                   ww1
                   (GHC.Types.[] @ GHC.Types.Char) } }) -}
49c321056cdba105c57214bcb3c29d52
  prompt04 ::
    GHC.IO.Handle.Types.Handle -> Lab04.State -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S,U><L,1*U(A,1*U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lab04.prompt1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <Lab04.State>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
50258588b07cd26d8ce89d1954fec159
  prompt1 ::
    GHC.IO.Handle.Types.Handle
    -> Lab04.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><L,1*U(A,1*U(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ hout :: GHC.IO.Handle.Types.Handle
                   state :: Lab04.State
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   hout
                   (Lab04.mkprompt state)
                   GHC.Types.False
                   eta) -}
7124128da4a8f6f7c8e7d2920275a93a
  stateFloat :: Lab04.State -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                          GHC.Types.Float) ->
                 case ds of wild { (,) ds1 f -> f }) -}
c3b838dad7606e957eef18366e6560bc
  thisIsLab04 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "This is Lab 4"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

